package com.marklogic.client.io;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.marklogic.client.Format;
import com.marklogic.client.MarkLogicIOException;
import com.marklogic.client.io.marker.XMLReadHandle;
import com.marklogic.client.io.marker.XMLWriteHandle;

/**
 * A JAXB Handle roundtrips a POJO (a Java data structure) to and from a database document.
 * 
 * The POJO class must have JAXB annotations or must be generated by xjc from an XML Schema.
 * 
 * The JAXB Handle must be initialized with a JAXB Context with which the root POJO classes
 * have been registered.
 */
public class JAXBHandle
    implements OutputStreamSender,
        XMLReadHandle<InputStream>, XMLWriteHandle<OutputStreamSender>
{
	static final private Logger logger = LoggerFactory.getLogger(JAXBHandle.class);

	private JAXBContext context;
	private Object      content;

	public JAXBHandle(JAXBContext context) {
		super();
		this.context = context;
	}

	public Object get() {
		return content;
	}
    public void set(Object content) {
    	this.content = content;
    }
    public JAXBHandle with(Object content) {
    	set(content);
    	return this;
    }

	public Format getFormat() {
		return Format.XML;
	}
	public void setFormat(Format format) {
		if (format != Format.XML)
			new IllegalArgumentException("JAXBHandle supports the XML format only");
	}
	public JAXBHandle withFormat(Format format) {
		setFormat(format);
		return this;
	}

    public Class<InputStream> receiveAs() {
    	return InputStream.class;
    }
    public void receiveContent(InputStream content) {
		try {
			Unmarshaller unmarshaller = context.createUnmarshaller();
			this.content = unmarshaller.unmarshal(content);
		} catch (JAXBException e) {
			logger.error("Failed to unmarshall object read from database document",e);
			throw new MarkLogicIOException(e);
		}
	}
	public JAXBHandle sendContent() {
		if (content == null) {
			throw new IllegalStateException("No object to write");
		}

		return this;
	}

	@Override
	public void write(OutputStream out) throws IOException {
		try {
			Marshaller marshaller = context.createMarshaller();
			marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
			marshaller.marshal(content, out);
		} catch (JAXBException e) {
			logger.error("Failed to marshall object for writing to database document",e);
			throw new MarkLogicIOException(e);
		}
	}
}
